pred <- predict(model_decisionTree, dataToPredict);
dataToPredict$predictDecisionTree <- pred;
dataToPredict;
#KNN Prediction
pred <- predict(model_knn, dataToPredict);
dataToPredict$predictKNN <- pred;
dataToPredict;
ctrl <- trainControl(method="cv", number=10);
decisionTreeCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="rpart", trControl=ctrl);
summary(decisionTreeCV$finalModel);
knnCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="knn", trControl=ctrl);
summary(knnCV);
library(caret);
library(ISLR);
library(rmarkdown);
library(knitr);
D <- read.csv("D:/iris.csv", header= TRUE, sep=",");
summary(D);
str(D);
pairs( ~ sepal_length + sepal_width + petal_length + petal_width, D);
hist(D$sepal_length);
hist(D$sepal_width);
hist(D$petal_length);
hist(D$petal_width);
#Create Trainset and testset
trainIndex <- createDataPartition(y=D$species, p=0.8, list=FALSE);
trainset <- D[trainIndex, ];
testset <- D[-trainIndex, ];
trainIndex;
trainset;
testset;
model_knn <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="knn", data=trainset);
print(model_knn);
summary(model_knn);
model_decisionTree <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="rpart", data=trainset);
print(model_decisionTree);
summary(model_decisionTree$finalModel);
dataToPredict <- data.frame(
sepal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
sepal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
),
petal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
petal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
)
)
pred <- predict(model_decisionTree, dataToPredict);
dataToPredict$predictDecisionTree <- pred;
dataToPredict;
#KNN Prediction
pred <- predict(model_knn, dataToPredict);
dataToPredict$predictKNN <- pred;
dataToPredict;
ctrl <- trainControl(method="cv", number=10);
decisionTreeCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="rpart", trControl=ctrl);
summary(decisionTreeCV$finalModel);
knnCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="knn", trControl=ctrl);
summary(knnCV);
library(caret);
library(ISLR);
library(rpart);
library(rmarkdown);
library(knitr);
D <- read.csv("D:/iris.csv", header= TRUE, sep=",");
summary(D);
str(D);
pairs( ~ sepal_length + sepal_width + petal_length + petal_width, D);
hist(D$sepal_length);
hist(D$sepal_width);
hist(D$petal_length);
hist(D$petal_width);
#Create Trainset and testset
trainIndex <- createDataPartition(y=D$species, p=0.8, list=FALSE);
trainset <- D[trainIndex, ];
testset <- D[-trainIndex, ];
trainIndex;
trainset;
testset;
model_knn <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="knn", data=trainset);
print(model_knn);
summary(model_knn);
model_decisionTree <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="rpart", data=trainset);
print(model_decisionTree);
dataToPredict <- data.frame(
sepal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
sepal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
),
petal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
petal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
)
)
pred <- predict(model_decisionTree, dataToPredict);
dataToPredict$predictDecisionTree <- pred;
dataToPredict;
#KNN Prediction
pred <- predict(model_knn, dataToPredict);
dataToPredict$predictKNN <- pred;
dataToPredict;
ctrl <- trainControl(method="cv", number=10);
decisionTreeCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="rpart", trControl=ctrl);
print(decisonTreeCV);
knnCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="knn", trControl=ctrl);
summary(knnCV);
library(caret);
library(ISLR);
library(rpart);
library(rmarkdown);
library(knitr);
D <- read.csv("D:/iris.csv", header= TRUE, sep=",");
summary(D);
str(D);
pairs( ~ sepal_length + sepal_width + petal_length + petal_width, D);
hist(D$sepal_length);
hist(D$sepal_width);
hist(D$petal_length);
hist(D$petal_width);
#Create Trainset and testset
trainIndex <- createDataPartition(y=D$species, p=0.8, list=FALSE);
trainset <- D[trainIndex, ];
testset <- D[-trainIndex, ];
trainIndex;
trainset;
testset;
model_knn <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="knn", data=trainset);
print(model_knn);
summary(model_knn);
model_decisionTree <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="rpart", data=trainset);
print(model_decisionTree);
dataToPredict <- data.frame(
sepal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
sepal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
),
petal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
petal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
)
)
pred <- predict(model_decisionTree, dataToPredict);
dataToPredict$predictDecisionTree <- pred;
dataToPredict;
#KNN Prediction
pred <- predict(model_knn, dataToPredict);
dataToPredict$predictKNN <- pred;
dataToPredict;
ctrl <- trainControl(method="cv", number=10);
decisionTreeCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="rpart", trControl=ctrl);
decisionTreeCV;
knnCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="knn", trControl=ctrl);
summary(knnCV);
library(caret);
library(ISLR);
library(rpart);
library(rmarkdown);
library(knitr);
D <- read.csv("D:/iris.csv", header= TRUE, sep=",");
summary(D);
str(D);
pairs( ~ sepal_length + sepal_width + petal_length + petal_width, D);
hist(D$sepal_length);
hist(D$sepal_width);
hist(D$petal_length);
hist(D$petal_width);
#Create Trainset and testset
trainIndex <- createDataPartition(y=D$species, p=0.8, list=FALSE);
trainset <- D[trainIndex, ];
testset <- D[-trainIndex, ];
trainIndex;
trainset;
testset;
model_knn <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="knn", data=trainset);
print(model_knn);
summary(model_knn);
model_decisionTree <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="rpart", data=trainset);
print(model_decisionTree);
dataToPredict <- data.frame(
sepal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
sepal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
),
petal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
petal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
)
)
pred <- predict(model_decisionTree, dataToPredict);
dataToPredict$predictDecisionTree <- pred;
dataToPredict;
#KNN Prediction
pred <- predict(model_knn, dataToPredict);
dataToPredict$predictKNN <- pred;
dataToPredict;
ctrl <- trainControl(method="cv", number=10);
decisionTreeCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="rpart", trControl=ctrl);
decisionTreeCV;
knnCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="knn", trControl=ctrl);
summary(knnCV);
knnCV;
library(caret);
library(ISLR);
library(rpart);
library(rmarkdown);
library(knitr);
D <- read.csv("D:/iris.csv", header= TRUE, sep=",");
#Data Understanding
summary(D);
str(D);
pairs( ~ sepal_length + sepal_width + petal_length + petal_width, D);
hist(D$sepal_length);
hist(D$sepal_width);
hist(D$petal_length);
hist(D$petal_width);
#Data Preparation
#Create Trainset and testset
trainIndex <- createDataPartition(y=D$species, p=0.8, list=FALSE);
trainset <- D[trainIndex, ];
testset <- D[-trainIndex, ];
trainIndex;
trainset;
testset;
#Modeling
#KNN Model
model_knn <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="knn", data=trainset);
print(model_knn);
summary(model_knn);
#Decison Tree Model
model_decisionTree <- train(species ~sepal_length + sepal_width + petal_length + petal_width, method="rpart", data=trainset);
print(model_decisionTree);
dataToPredict <- data.frame(
sepal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
sepal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
),
petal_length=c(0.58, 0.86, 0.29, 0.20, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35
),
petal_width=c(0.71, 0.13, 0.79, 0.20, 0.56, 0.92, 0.01, 0.60, 0.70, 0.73
)
)
#KNN Prediction
pred <- predict(model_knn, dataToPredict);
dataToPredict$predictKNN <- pred;
dataToPredict;
#Decision Tree Prediction
pred <- predict(model_decisionTree, dataToPredict);
dataToPredict$predictDecisionTree <- pred;
dataToPredict;
#Evaluation
#KNN Validation
knnCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="knn", trControl=ctrl);
summary(knnCV);
#Decision Tree Validation
ctrl <- trainControl(method="cv", number=10);
decisionTreeCV <- train(species ~ sepal_length + sepal_width + petal_length + petal_width, data=D, method="rpart", trControl=ctrl);
decisionTreeCV;
summary(knnCV);
View(testset)
shiny::runApp('D:/COVID 19')
shiny::runApp('D:/COVID 19')
runApp('D:/COVID 19')
runApp('D:/COVID 19')
runApp('D:/COVID 19')
runApp('D:/COVID 19')
runApp('D:/COVID 19')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name="gohminghui88", token='422DB846F6BF2E8C4D171234427603E5', secret='<SECRET>')
rsconnect::setAccountInfo(name="gohminghui88", token='422DB846F6BF2E8C4D171234427603E5', secret='7VxVQ+6Wk7x2nuAiGbkoXzA5XdobsQcxfTz42CeK')
deployApp
deployApp()
source('C:/Users/gohmi/Desktop/UoPeople/Learning Guides/LearningJournal4_3.R', echo=TRUE)
---
title: "Report"
install.packages("rmarkdown");
hist(dy);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy$sepal_length);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy$sepal_length);
#Data Preparation
train_ind <- sample(seq_len(nrow(dy)), size = smp_size)
train <- dy[train_ind, ]
test <- dy[-train_ind, ]
#Modeling
multi.fit <- lm.fit(sepal_length ~ sepal_width + petal_length, data = dy)
#Evaluation
summary(multi.fit);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy$sepal_length);
#Data Preparation
smp_size <- floor(0.75 * nrow(dy))
train_ind <- sample(seq_len(nrow(dy)), size = smp_size)
train <- dy[train_ind, ]
test <- dy[-train_ind, ]
#Modeling
multi.fit <- lm.fit(sepal_length ~ sepal_width + petal_length, data = dy)
#Evaluation
summary(multi.fit);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy$sepal_length);
#Data Preparation
smp_size <- floor(0.75 * nrow(dy))
train_ind <- sample(seq_len(nrow(dy)), size = smp_size)
train <- dy[train_ind, ]
test <- dy[-train_ind, ]
#Modeling
multi.fit <- lm.fit(sepal_length ~ sepal_width + petal_length, data=dy)
#Evaluation
summary(multi.fit);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy$sepal_length);
#Data Preparation
smp_size <- floor(0.75 * nrow(dy))
train_ind <- sample(seq_len(nrow(dy)), size = smp_size)
train <- dy[train_ind, ]
test <- dy[-train_ind, ]
#Modeling
multi.fit <- lm.fit(sepal_length, sepal_width, data=dy)
#Evaluation
summary(multi.fit);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy$sepal_length);
#Data Preparation
smp_size <- floor(0.75 * nrow(dy))
train_ind <- sample(seq_len(nrow(dy)), size = smp_size)
train <- dy[train_ind, ]
test <- dy[-train_ind, ]
#Modeling
multi.fit <- lm(sepal_length ~ sepal_width, data=dy)
#Evaluation
summary(multi.fit);
dy <- read.csv("D:/iris.csv");
#Data Understanding
summary(dy);
str(dy);
hist(dy$sepal_length);
#Data Preparation
smp_size <- floor(0.75 * nrow(dy))
train_ind <- sample(seq_len(nrow(dy)), size = smp_size)
train <- dy[train_ind, ]
test <- dy[-train_ind, ]
#Modeling
multi.fit <- lm(sepal_length ~ sepal_width + petal_length, data=dy)
#Evaluation
summary(multi.fit);
install.packages("RTextTools");
install.packages("RTextTools");
install.packages("tm");
install.packages("SnowballC");
install.packages(RTextTools);
install.packages("RTextTools");
install.packages("RtextTools");
install.packages('RTextTools',repos='http://cran.us.r-project.org')
install.packages('RTextTools', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("RTextTools")
shiny::runApp('C:/Users/gohmi/Desktop')
runApp('C:/Users/gohmi/Desktop')
runApp('C:/Users/gohmi/Desktop')
runApp('C:/Users/gohmi/Desktop')
library("ggplot2");
library("dplyr");
library("ggmap");
library("sf");
codata <- read.csv("D:/data.csv", header=TRUE);
co <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header=TRUE)
co;
d <- codata[which(codata$indicator=="cases"), ]
df <- d %>% dplyr::filter(year_week==max(d$["year_week"])) %>% dplyr::select(1, indicator, weekly_count, year_week) %>% replace(.=="NA", 0)
names(df)[1] <- "Country";
print(df);
map.world <- map_data("world");
map.world;
map.world_joined <- left_join(map.world, df, by = c('region' = 'Country'));
map.world_joined;
co87 <- left_join(df, co, by = c("Country" = "Country.Region")) %>% dplyr::compute();
co87 <- co87 %>% dplyr::select(Country, indicator, weekly_count, year_week, Lat, Long) %>% replace(.=="NA", 0) %>% mutate(count = 100/weekly_count)
co87
ggplot() +
geom_polygon(data = map.world_joined, aes(x = long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = co87, aes(x = Long, y = Lat, size=count), color = "red", alpha=0.3) +
scale_fill_manual(values = c("#CCCCCC","#e60000")) +
labs(title = ' COVID-19 Infected Countries') +
theme_set(theme_bw())
library("ggplot2");
library("dplyr");
library("ggmap");
library("sf");
codata <- read.csv("D:/data.csv", header=TRUE);
co <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header=TRUE)
co;
d <- codata[which(codata$indicator=="cases"), ]
df <- d %>% dplyr::filter(year_week==max(d$["year_week"])) %>% dplyr::select(1, indicator, weekly_count, year_week) %>% replace(.=="NA", 0)
names(df)[1] <- "Country";
print(df);
map.world <- map_data("world");
map.world;
map.world_joined <- left_join(map.world, df, by = c('region' = 'Country'));
map.world_joined;
co87 <- left_join(df, co, by = c("Country" = "Country.Region")) %>% dplyr::compute();
co87 <- co87 %>% dplyr::select(Country, indicator, weekly_count, year_week, Lat, Long) %>% replace(.=="NA", 0) %>% mutate(count = 100/weekly_count)
co87
ggplot() +
geom_polygon(data = map.world_joined, aes(x = long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = co87, aes(x = Long, y = Lat, size=count), color = "red", alpha=0.3) +
scale_fill_manual(values = c("#CCCCCC","#e60000")) +
labs(title = ' COVID-19 Infected Countries') +
theme_set(theme_bw())
library("ggplot2");
library("dplyr");
library("ggmap");
library("sf");
codata <- read.csv("D:/data.csv", header=TRUE);
co <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header=TRUE)
co;
d <- codata[which(codata$indicator=="cases"), ]
print(coData);
df <- d %>% dplyr::filter(year_week==max(d$["year_week"])) %>% dplyr::select(1, indicator, weekly_count, year_week) %>% replace(.=="NA", 0)
names(df)[1] <- "Country";
print(df);
map.world <- map_data("world");
map.world;
map.world_joined <- left_join(map.world, df, by = c('region' = 'Country'));
map.world_joined;
co87 <- left_join(df, co, by = c("Country" = "Country.Region")) %>% dplyr::compute();
co87 <- co87 %>% dplyr::select(Country, indicator, weekly_count, year_week, Lat, Long) %>% replace(.=="NA", 0) %>% mutate(count = 100/weekly_count)
co87
ggplot() +
geom_polygon(data = map.world_joined, aes(x = long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = co87, aes(x = Long, y = Lat, size=count), color = "red", alpha=0.3) +
scale_fill_manual(values = c("#CCCCCC","#e60000")) +
labs(title = ' COVID-19 Infected Countries') +
theme_set(theme_bw())
library("ggplot2");
library("dplyr");
library("ggmap");
library("sf");
codata <- read.csv("D:/data.csv", header=TRUE);
co <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header=TRUE)
co;
d <- codata[which(codata$indicator=="cases"), ]
print(coData);
df <- d %>% dplyr::filter(year_week==max(d$year_week)) %>% dplyr::select(1, indicator, weekly_count, year_week) %>% replace(.=="NA", 0)
names(df)[1] <- "Country";
print(df);
map.world <- map_data("world");
map.world;
map.world_joined <- left_join(map.world, df, by = c('region' = 'Country'));
map.world_joined;
co87 <- left_join(df, co, by = c("Country" = "Country.Region")) %>% dplyr::compute();
co87 <- co87 %>% dplyr::select(Country, indicator, weekly_count, year_week, Lat, Long) %>% replace(.=="NA", 0) %>% mutate(count = 100/weekly_count)
co87
ggplot() +
geom_polygon(data = map.world_joined, aes(x = long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = co87, aes(x = Long, y = Lat, size=count), color = "red", alpha=0.3) +
scale_fill_manual(values = c("#CCCCCC","#e60000")) +
labs(title = ' COVID-19 Infected Countries') +
theme_set(theme_bw())
library("ggplot2");
library("dplyr");
library("ggmap");
library("sf");
t <- read.csv("D:/data.csv", header=TRUE);
codata <- read.csv("D:/data.csv", header=TRUE);
co <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header=TRUE)
co;
d <- codata[which(codata$indicator=="cases"), ]
print(coData);
df <- d %>% dplyr::filter(year_week==max(d$year_week)) %>% dplyr::select(1, indicator, weekly_count, year_week) %>% replace(.=="NA", 0)
names(df)[1] <- "Country";
print(df);
map.world <- map_data("world");
map.world;
map.world_joined <- left_join(map.world, df, by = c('region' = 'Country'));
map.world_joined;
co87 <- left_join(df, co, by = c("Country" = "Country.Region")) %>% dplyr::compute();
co87 <- co87 %>% dplyr::select(Country, indicator, weekly_count, year_week, Lat, Long) %>% replace(.=="NA", 0) %>% mutate(count = 100/weekly_count)
co87
ggplot() +
geom_polygon(data = map.world_joined, aes(x = long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data = co87, aes(x = Long, y = Lat, size=count), color = "red", alpha=0.3) +
scale_fill_manual(values = c("#CCCCCC","#e60000")) +
labs(title = ' COVID-19 Infected Countries') +
theme_set(theme_bw())
shiny::runApp('D:/COVID19')
runApp('D:/COVID19')
runApp('D:/COVID19')
